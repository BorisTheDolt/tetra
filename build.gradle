import groovy.json.JsonSlurper
import groovy.json.JsonException
import groovy.json.JsonOutput

buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "com.wynprice.cursemaven:CurseMaven:2.1.1"
    }
}
apply plugin: 'net.minecraftforge.gradle'

apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.wynprice.cursemaven"

if (System.getenv('VERSION') != null) {
    tetra_version = System.getenv('VERSION')
}

version = "${mc_version}-${tetra_version}"
group = 'se.mickelus.tetra'
archivesBaseName = "tetra"

repositories {
    mavenLocal()
    maven { url = "https://maven.theillusivec4.top/" }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = 'patchouli/botania'
        url = 'http://maven.blamejared.com/'
    }
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', '' //'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                tetra {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                tetra {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'tetra', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                tetra {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache', 'temp'
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    if (findProject(':mgui') != null) {
        compile project(':mgui')
    } else {
        compile fg.deobf("curse.maven:mgui:2928277")
    }
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios:${curios_version}:api")

    compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
//    runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

//    compile fg.deobf("curse.maven:apotheosis:2906078")
//    compile fg.deobf("curse.maven:apotheosis-placebo:2870411")
//
//    compile fg.deobf("curse.maven:cyclic:2934819")
//
//    compile fg.deobf("curse.maven:naturesaura:2920340")
//    compile fg.deobf("curse.maven:naturesaura-patchouli:2925865")
//
//    compile fg.deobf("curse.maven:ensorcellation:2935190")
//    compile fg.deobf("curse.maven:ensorcellation-cofh_core:2935185")
//
//    compile fg.deobf("curse.maven:enchantable:2931023")
//
//    compile fg.deobf("curse.maven:bluepower:2934396")
//    
//    compile fg.deobf("curse.maven:ma_enchants:2931675")
//    
//    compile fg.deobf("curse.maven:cursed:2913022")
//    compile fg.deobf("curse.maven:cursed-bookshelf:2935828")

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "tetra",
            "Specification-Vendor": "mickelus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"tetra",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

processResources {
    doLast {

        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0

        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

            File file = it
            jsonMinified++
            def oldLength = file.length()
            try {
                file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            } catch(JsonException e) {
                throw new JsonException("Failed to parse json in " + file.path)
            }
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }

        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}
